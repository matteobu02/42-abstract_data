
			///////////
			// DEBUG //
			///////////

			node_ptr get_root() const { return _m_root; }

			void add(const value_type& val, bool color)
			{
				node_ptr current = _m_root;

				if (_m_isnil(current))
				{
					insert(val);
					return;
				}

				node_ptr p;
				while (!_m_isnil(current))
				{
					p = current;
					if (_m_comp(val, current->data))
						current = current->left;
					else
						current = current->right;
				}

				node_ptr new_node = _m_add_node(val, color, p);
				if (_m_comp(val, p->data))
					p->left = new_node;
				else
				{
					p->right = new_node;
					if (p == _m_max_node)
						_m_update_max_node(new_node);
				}

			}

			struct Trunk
			{
				Trunk *prev;
				std::string str;

				Trunk(Trunk *prev, std::string str)
				{
					this->prev = prev;
					this->str = str;
				}
			};

			void showTrunks(Trunk *p)
			{
				if (p == NULL) {
					return;
				}

				showTrunks(p->prev);
				std::cout << p->str;
			}

			void printTree(node_ptr root, Trunk *prev, bool isLeft, bool type)
			{
				if (root == NULL) {
					return;
				}

				std::string prev_str = "    ";
				Trunk *trunk = new Trunk(prev, prev_str);

				printTree(root->right, trunk, true, type);
				if (!prev) {
					trunk->str = "———";
				}
				else if (isLeft)
				{
					trunk->str = "/———";
					prev_str = "   |";
				}
				else {
					trunk->str = "\\———";
					prev->str = prev_str;
				}
				showTrunks(trunk);
				std::cout << " " << root->data.first << "(" << (root->is_black ? "B" : "R") << ")" << std::endl;
				if (prev) {
					prev->str = prev_str;
				}
				trunk->str = "   |";
				printTree(root->left, trunk, false, type);

				delete trunk;
			}
